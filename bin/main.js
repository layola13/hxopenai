// Generated by Haxe 4.3.6
(function ($hx_exports, $global) { "use strict";
class Client {
	constructor() {
		let configuration = { apiKey : process.env["API_KEY_GUIJI"], baseURL : process.env["BASE_URL"]};
		this.openai = new openai_OpenAI(configuration);
	}
	processPrompt(txtContent) {
		let _gthis = this;
		return (async function() {
			try {
				let params = { model : "gpt-4o-mini", messages : [{ role : "user", content : txtContent}], max_tokens : 204800, temperature : 0.8, stream : true};
				let result = "";
				let stream = (await _gthis.openai.chat.completions.create(params));
				
				for await (const chunk of stream) {
					const content = chunk.choices[0]?.delta?.content || '';
					process.stdout.write(content);
					result+=(content);
				}
			;
				return result.toString();
			} catch( _g ) {
				let e = haxe_Exception.caught(_g).unwrap();
				console.log("src/Client.hx:63:",e);
				return e.toString();
			}
		})();
	}
}
$hx_exports["Client"] = Client;
var Dotenv = require("dotenv");
class Main {
	static main() {
		Dotenv.config();
		console.log("src/Main.hx:16:","Hello World");
		let client = new Client();
		client.processPrompt("Hello World,who are you?").then(function(response) {
			console.log("src/Main.hx:24:","-------------");
			console.log("src/Main.hx:25:",response);
		});
	}
}
class haxe_Exception extends Error {
	constructor(message,previous,native) {
		super(message);
		this.message = message;
		this.__previousException = previous;
		this.__nativeException = native != null ? native : this;
	}
	unwrap() {
		return this.__nativeException;
	}
	static caught(value) {
		if(((value) instanceof haxe_Exception)) {
			return value;
		} else if(((value) instanceof Error)) {
			return new haxe_Exception(value.message,null,value);
		} else {
			return new haxe_ValueException(value,null,value);
		}
	}
}
class haxe_ValueException extends haxe_Exception {
	constructor(value,previous,native) {
		super(String(value),previous,native);
		this.value = value;
	}
	unwrap() {
		return this.value;
	}
}
class haxe_iterators_ArrayIterator {
	constructor(array) {
		this.current = 0;
		this.array = array;
	}
	hasNext() {
		return this.current < this.array.length;
	}
	next() {
		return this.array[this.current++];
	}
}
var openai_OpenAI = require("openai").OpenAI;
{
}
Main.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, {});

//# sourceMappingURL=main.js.map